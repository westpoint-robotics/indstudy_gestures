// Generated by gencpp from file publisher_subscriber/GestureInformation.msg
// DO NOT EDIT!


#ifndef PUBLISHER_SUBSCRIBER_MESSAGE_GESTUREINFORMATION_H
#define PUBLISHER_SUBSCRIBER_MESSAGE_GESTUREINFORMATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace publisher_subscriber
{
template <class ContainerAllocator>
struct GestureInformation_
{
  typedef GestureInformation_<ContainerAllocator> Type;

  GestureInformation_()
    : user_id(0)
    , gesture_id(0)
    , gesture_name()  {
    }
  GestureInformation_(const ContainerAllocator& _alloc)
    : user_id(0)
    , gesture_id(0)
    , gesture_name(_alloc)  {
  (void)_alloc;
    }



   typedef uint16_t _user_id_type;
  _user_id_type user_id;

   typedef uint16_t _gesture_id_type;
  _gesture_id_type gesture_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _gesture_name_type;
  _gesture_name_type gesture_name;





  typedef boost::shared_ptr< ::publisher_subscriber::GestureInformation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::publisher_subscriber::GestureInformation_<ContainerAllocator> const> ConstPtr;

}; // struct GestureInformation_

typedef ::publisher_subscriber::GestureInformation_<std::allocator<void> > GestureInformation;

typedef boost::shared_ptr< ::publisher_subscriber::GestureInformation > GestureInformationPtr;
typedef boost::shared_ptr< ::publisher_subscriber::GestureInformation const> GestureInformationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::publisher_subscriber::GestureInformation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::publisher_subscriber::GestureInformation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::publisher_subscriber::GestureInformation_<ContainerAllocator1> & lhs, const ::publisher_subscriber::GestureInformation_<ContainerAllocator2> & rhs)
{
  return lhs.user_id == rhs.user_id &&
    lhs.gesture_id == rhs.gesture_id &&
    lhs.gesture_name == rhs.gesture_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::publisher_subscriber::GestureInformation_<ContainerAllocator1> & lhs, const ::publisher_subscriber::GestureInformation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace publisher_subscriber

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::publisher_subscriber::GestureInformation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::publisher_subscriber::GestureInformation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::publisher_subscriber::GestureInformation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::publisher_subscriber::GestureInformation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::publisher_subscriber::GestureInformation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::publisher_subscriber::GestureInformation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::publisher_subscriber::GestureInformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3cf88e91afe598ebbb2355758ea13cb1";
  }

  static const char* value(const ::publisher_subscriber::GestureInformation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3cf88e91afe598ebULL;
  static const uint64_t static_value2 = 0xbb2355758ea13cb1ULL;
};

template<class ContainerAllocator>
struct DataType< ::publisher_subscriber::GestureInformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "publisher_subscriber/GestureInformation";
  }

  static const char* value(const ::publisher_subscriber::GestureInformation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::publisher_subscriber::GestureInformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 user_id\n"
"uint16 gesture_id\n"
"string gesture_name\n"
;
  }

  static const char* value(const ::publisher_subscriber::GestureInformation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::publisher_subscriber::GestureInformation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.user_id);
      stream.next(m.gesture_id);
      stream.next(m.gesture_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GestureInformation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::publisher_subscriber::GestureInformation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::publisher_subscriber::GestureInformation_<ContainerAllocator>& v)
  {
    s << indent << "user_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.user_id);
    s << indent << "gesture_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.gesture_id);
    s << indent << "gesture_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.gesture_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PUBLISHER_SUBSCRIBER_MESSAGE_GESTUREINFORMATION_H
